class MyCircularQueue {

    int front=-1;
    int end=-1;
    int[] data;

    public MyCircularQueue(int k) {

        data=new int[k];
        
    }
    
    public boolean enQueue(int value) {

        if(isFull()){
            return false;
        }

        else{
            if(end==-1){
                front=0;
                end=0;
                data[end]=value;
            }

            else{
                end=(end+1)%data.length;
                data[end]=value;
            }

            return true;
        }
    }
    
    public boolean deQueue() {

        if(isEmpty()){
            return false;
        }

        else{
            if(front==end){
                front=-1;
                end=-1;


            }

            else{
                front=(front+1)%data.length;
            }

            return true;
        }


        
    }
    
    public int Front() {
        if(front!=-1){
            return data[front];

        }
        else{
            return -1;
        }
        
    }
    
    public int Rear() {

        if(end!=-1){return data[end];}
        else{return -1;}
        
    }
    
    public boolean isEmpty() {

        return front==-1;
        
    }
    
    public boolean isFull() {

        return front==(end+1)%data.length;
        
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
